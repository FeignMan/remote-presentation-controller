<div class="reveal">

	<!-- Used to fade in a background when a specific slide state is reached -->
	<div class="state-background"></div>
	
	<!-- Any section element inside of this container is displayed as a slide -->
	<div class="slides">
		<section>
			<h1>Node.js Introduction</h1>
			<h3 class="inverted">From WTF to OMG!</h3>
			<script>
				// Delicously hacky. Look away.
				if( navigator.userAgent.match( /(iPhone|iPad|iPod|Android)/i ) ) document.write( '<p style="color: rgba(0,0,0,0.3); text-shadow: none;">('+'Tap to navigate'+')</p>' );
			</script>
		</section>

		<section>
			<h2>Agenda</h2>
			<ul>
				<li> Online Services on Just Dance </li>
				<li> Why this talk? </li>
				<li> Node.js: What is it? </li>
				<li> Traditional vs Event-based Concurrency Model </li>
				<li> Moving to Node: Motivations </li>
				<li> Moving to Node: Easy to integrate </li>
				<li> Results, Achievements </li>
				<li> Development Methodology </li>
				<li> Conclusion </li>
			</ul>
		</section>
		
		<section>
			<h2>Online Services on Just Dance</h2>

			<section>
				<p class="fragment"><strong> Before Node.js: </strong></sp>
				<p><ul>
					<li class="fragment"> Just Dance 3: DLC + Rich Content </li>
					<li class="fragment"> Just Dance 4: DLC + Rich Content (moved to RDV) </li>
					<li class="fragment"> Just Dance 2014: Introduced User Content, Soft Realtime Multiplayer  </li>
					<li class="fragment"> Just Dance 2015: Added Online Leaderboards </li>
					<p><li class="fragment"> Separate environment for each platform for each game </li></p>
				</ul></p>
			</section>
			<section>
				<p><strong>After Node.js</strong></p>
				<section>
					<p><ul>
						<li class="fragment"> Just Dance 2016: Game as a browser! 6 SKUs on a single server. Introduced Netflix-like subscription-streaming service, new UGCs types, online avatars, Dance Quests, asynchronous challenges... </li>
						<li class="fragment"> Just Dance 2017: Cross-platform World Dance Floor, new async challenge service, seamless subscription trial </li> 
						<li class="fragment"> Live ops improved: versioned content-management, Back Office improvements, server-side metrics... </li>
						<p><li class="fragment"> Currently running on a single Node.js environment: 14 SKUs on 7 platforms from 2 games </li></p>
					</ul></p>
				</section>
			</section>
		</section>

		<section>
			<h2> Why this Talk? </h2>
			<p><ul>
				<li class="fragment"> To share our experiences, of course! (2 years of experience in Node JS web-servers) </li>
				<li class="fragment"> Build an internal talent pool of online devs </li>
				<li class="fragment"> Node runtime suitable for desktop apps </li>
				<p class="fragment"> ...even quadcopters! :D </p>
				<li class="fragment"> May be of interest to tools teams (Yay!) </li>
				<li class="fragment"> Node offers productivity and flexibility: Attractive for small productions </li>
			</ul></p>
		</section>

		<section>
			<h2>What is Node.js?</h2>

			<section><p> It is NOT a Javascript framework. </p></section>

			<section>
				<p> It is a Runtime Environment using Javascript as a scripting language. </p>
				<p class="fragment"> Node Exposes an event driven architecture leveraging asynchronous I/O </p>
				<p class="fragment"> Designed to handle hundreds of thousands of connections in a server environment</p>
			</section>

			<section>
				<p><img src="/images/eventloop.png"></p>
			</section>

			<section>
				<p><img src="/images/eventloop2.jpg"></p>
			</section>

			<section>
				<h4> Node runtime operates on a single-threaded event loop</h2>
				<p><ul>
					<li class="fragment"> Uses non-blocking I/O calls </li>
					<li class="fragment"> Under the hood, Node uses libuv to handle asynchronous native OS events </li>
					<li class="fragment"> Avoids the 1-thread-per-connection approach </li>
					<li class="fragment"> Completely avoids context-switching between thousands of threads </li>
					<li class="fragment"> Allows hundreds of thousands of concurrent connections </li>
					<li class="fragment"> Each new connection only costs a small heap allocation and an event in the event queue </li>
				</ul></p>
			</section>

			<section>
				<h4> Google V8 Engine + an event loop using a low level API (libuv) + Javascript.</h2>
				<p><ul>
					<li class="fragment"> Node as a package contains an interpreter and a compiler taken from V8 </li>
					<li class="fragment"> V8 is really fast; compiles JS to native code and caches </li>
					<li class="fragment"> Core Node functionality exposed through built-in Javascript libraries </li>
					<li class="fragment"> These core libraries allow access to stuff like the file system and networking from the Node environment </li>
					<li class="fragment"> Uses C++ bindings to glue everything together and to the OS </li>
					<li class="fragment"> JS great on the server: </li>
					<p class="fragment"> Coming from the browser it's designed to handle events </p>
					<p class="fragment"> Lambdas and closures are great for the async way! </p>
				</ul></p>
			</section>

			<section>
				<p><img src="/images/NodeJS_System.png"></p>
			</section>
		</section>

		<section>
			<h3>The Traditional Concurrency Model:</h2>
			<p><ul>
				<li class="fragment"> Spawn a thread per HTTP connection </li>
				<li class="fragment"> Threads block on I/O </li>
				<li class="fragment"> Context-switching is expensive! </li>
				<li class="fragment"> Threads demand more RAM </li>
				<li class="fragment"> Cost goes up with number of connections </li>
				<li class="fragment"> It gets worse if I/O wait time increases </li>
			</ul></p>
		</section>

		<section>
			<h2>Node is efficient</h2>
			<section>
				<p><img src="/images/Node-EventDriven.jpg"></p>
			</section>

			<section>
				<p><img src="/images/node-bench.png"></p>
			</section>

			<section>
				<p><img src="/images/node-bench2.png"></p>
			</section>

			<section>
				<ul>
					<li class="fragment"> Does real-time well using the web-socket protocol</li>
					<li class="fragment"> Built to handle data as streams </li>
					<li class="fragment"> Runs in a process, scales seamlessly on the cloud </li>
					<li class="fragment"> Scales on multiple CPU-cores with a process manager like PM2 </li>
					<li class="fragment"> PM2 manages multiple node processes and restarts them if required </li>
				<ul>
			</section>
		</section>

		<section>
			<h2>Moving to Node: Motivations</h2>

			<section>
				<h4>RDV was too expensive</h4>
				<section>
					<p><table class="fragment">
						<thead>
					    	<tr class="header">
								<th style="text-align: left;">Game Version</th>
								<th style="text-align: left;">RDV Version Upgrade</th>
								<th style="text-align: left;">UpgradeType</th>
								<th style="text-align: left;">UpgradeCost</th>
					    	</tr>
						</thead>
						<tbody>
							<tr class="odd">
								<td style="text-align: left;">JD4</td>
								<td style="text-align: left;">1.4 - 2.0</td>
								<td style="text-align: left;">major upgrade</td>
								<td style="text-align: left;">9MM</td>
							</tr>
							<tr class="even">
								<td style="text-align: left;">JD2015</td>
								<td style="text-align: left;">2.3 to 2.5</td>
								<td style="text-align: left;">minor upgrade</td>
								<td style="text-align: left;">2MM</td>
							</tr>
							<tr class="odd">
								<td style="text-align: left;">JD2016</td>
								<td style="text-align: left;">2.6 to 3.x</td>
								<td style="text-align: left;">major + minor(s)</td>
								<td style="text-align: left;">?</td>
							</tr>
						</tbody>
					</table></p>
				</section>

				<section>
					<ul>
						<li class="fragment"> Using an RDV server requires game client to integrate a client SDK </li>
						<li class="fragment"> Every Just Dance version needed an RDV upgrade </li>
						<li class="fragment"> An server upgrade would require a client upgrade </li>
						<li class="fragment"> ...and vice-versa... </li>
					</ul>
				</section>
			</section>

			<section>
				<h4> RDV Server offered no visibility </h4>

				<ul>
					<li class="fragment"> No metrics available from the server </li>
					<li class="fragment"> Server logs were difficult to retrieve </li>
					<li class="fragment"> Server would stop logging if logs exceeded size limit (~100MB) </li>
					<li class="fragment"> No centralized storage or filtering mechanism for logs </li>
				</ul>
			</section>

			<section>
				<h4> Tool support was lacking </h4>

				<ul>
					<li class="fragment"> Suboptimal MySQL queries generated by tools </li>
					<li class="fragment"> Sandbox Manager website was slow; offered limited features </li>
					<li class="fragment"> Client SDK tools did not integrate well into workflow </li>
				</ul>
			</section>

			<section>
				<h4> Overdependence on GNS </h4>
				<p><img src="/images/online_sosit.png"></p>
			</section>
		</section>

		<section>
			<h2> Node.js was an attractive alternative </h2>

			<section>
				<h4> Node is good for web-services, tools, and real-time applications </h4>
				<p><img src="/images/online_node1.png"></p>
			</section>

			<section>
				<h4> HTTP is a standard protocol </h4>
				<p><img src="/images/online_standard.png"></p>
				<p><ul>
					<li class="fragment"> Node exposes services over HTTP(S) </li>
					<li class="fragment"> Tools, mobile apps, websites could directly talk to the server </li>
					<li class="fragment"> On the game client, Ubiservices SDK offers a HTTP client lib </li>
				</ul></p>
			</section>

			<section>
				<h4> Open-Source! </h4>
				<p><ul>
					<li class="fragment"> Better documentation </li>
					<li class="fragment"> Easier to find knowledgable progammers </li>
					<p class="fragment"><img src="/images/online_jobs.png"></p>
					<li class="fragment"> Support: Forums, Community, Google </li>
					<p class="fragment"><img src="/images/online_google.png"></p>
				</ul></p>
			</section>

			<section>
				<h4> Dedicated Machines on Ubisoft Cloud Online </h4>

				<p><img src="/images/online_uco.gif" style="max-height: 1280px; max-width: 960px;"></p>
			</section>
		</section>

		<section>
			<h2> Moving to Node: Easy to integrate </h2>

			<ul>
				<li class="fragment"> Ubiservices provides a HTTP library </li>
				<li class="fragment"> Our advise would be to write an async wrapper over UbiServices's HTTP </li>
				<li class="fragment"> Use the Ubiticket for client session management and authentication </li>
				<li class="fragment"> Set up a logging system: We use NxLog + Logstash + ElasticSearch </li>
				<li class="fragment"> Set up a deployment system: We use Webistrano for now </li>
				<p><li class="fragment"> Talk to us! It'll be <strong>much</strong> quicker! </li></p>
			</ul>
		</section>

		<section>
			<h2> Development Methodologies </h2>

			<section>
				<p> TDD: Test Driven Development </p>
				<ul>
					<li class="fragment"> In fact, essential with Javascript development </li>
					<li class="fragment"> Unit tests replace the compiler for syntax checking </li>
					<li class="fragment"> Catch runtime crashes </li>
					<li class="fragment"> Check application logic </li>
				</ul>
			</section>
			<section>
				<p> Continuous Integration </p>
				<ul>
					<li class="fragment"> Push to prod every week </li>
					<li class="fragment"> Bug fixes deployed to prod continuously </li>
					<li class="fragment"> Lower Risk: Roll often, roll small, roll back ;) </li>
				</ul>
			</section>
		</section>

		<section>
			<h2> Results, Achievements </h2>

			<ul>
				<li class="fragment"> Faster development iteration </li>
				<li class="fragment"> Managing 10 platforms with a small team </li>
				<li class="fragment"> Cross-platform Multiplayer </li>
				<li class="fragment"> Multiple game versions on the same servers </li>
				<li class="fragment"> Shared user data between game versions and platforms </li>
				<li class="fragment"> Lesser GNS tickets, more infrastrusture, automation </li>
				<li class="fragment"> Team is empowered; Team-morale is high </li>
			</ul>
		</section>

		<section>
			<h2> Conclusions </h2>
		</section>
	</div>

	<!-- The navigational controls UI -->
	<aside class="controls">
		<a class="left" href="#">&#x25C4;</a>
		<a class="right" href="#">&#x25BA;</a>
		<a class="up" href="#">&#x25B2;</a>
		<a class="down" href="#">&#x25BC;</a>
	</aside>

	<!-- Displays presentation progress, max value changes via JS to reflect # of slides -->
	<div class="progress"><span></span></div>
	
</div>





